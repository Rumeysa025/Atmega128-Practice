
Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d88  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa2  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000342  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	b0 c0       	rjmp	.+352    	; 0x186 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8e d0       	rcall	.+284    	; 0x1c6 <main>
  aa:	e2 c0       	rjmp	.+452    	; 0x270 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_strobe_lcd_e>:
void lcd_command(unsigned char dat);
void lcd_write_cmd(unsigned char byte);

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_strobe_lcd_e+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_strobe_lcd_e+0x10>
  be:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);  	// E low
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_strobe_lcd_e+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_strobe_lcd_e+0x22>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <lcd_write_data>:
	}
}

/* Write a single character to the LCD */
void lcd_write_data(unsigned char byte)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
  d8:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  e0:	e6 df       	rcall	.-52     	; 0xae <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
  e2:	c2 95       	swap	r28
  e4:	c0 7f       	andi	r28, 0xF0	; 240
  e6:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	df df       	rcall	.-66     	; 0xae <lcd_strobe_lcd_e>
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <lcd_display_text>:
	lcd_command( 0x80 );
}

/* Write a string of text to the LCD */
void lcd_display_text(char *str)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
	for(;*str; str++){
  fa:	02 c0       	rjmp	.+4      	; 0x100 <lcd_display_text+0xc>
		lcd_write_data(*str);
  fc:	eb df       	rcall	.-42     	; 0xd4 <lcd_write_data>
}

/* Write a string of text to the LCD */
void lcd_display_text(char *str)
{
	for(;*str; str++){
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	88 81       	ld	r24, Y
 102:	81 11       	cpse	r24, r1
 104:	fb cf       	rjmp	.-10     	; 0xfc <lcd_display_text+0x8>
		lcd_write_data(*str);
	}
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_command>:
}

/* Write commands to the LCD */
void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0;			// hoge nibble
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
 112:	95 b3       	in	r25, 0x15	; 21
 114:	98 60       	ori	r25, 0x08	; 8
 116:	95 bb       	out	0x15, r25	; 21
 118:	ef e4       	ldi	r30, 0x4F	; 79
 11a:	f3 ec       	ldi	r31, 0xC3	; 195
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_command+0x10>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_command+0x16>
 122:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(25);				// wait 1 ms
	PORTC = 0x04;				// stop (EN = 0)
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;	// lage nibble
 128:	f0 e1       	ldi	r31, 0x10	; 16
 12a:	8f 9f       	mul	r24, r31
 12c:	c0 01       	movw	r24, r0
 12e:	11 24       	eor	r1, r1
 130:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
 132:	85 b3       	in	r24, 0x15	; 21
 134:	88 60       	ori	r24, 0x08	; 8
 136:	85 bb       	out	0x15, r24	; 21
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_command+0x30>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_command+0x36>
 142:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(25);				// wait 1 ms
	PORTC = 0x00;				// stop
 144:	15 ba       	out	0x15, r1	; 21
 146:	08 95       	ret

00000148 <lcd_init>:

/* Initlializes the LCD */
void lcd_init(void)
{
	// Set ALL pins on PORTC to output
	DDRC = 0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	84 bb       	out	0x14, r24	; 20
	// return home (cursor to top left)
	lcd_command( 0x02 );
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	de df       	rcall	.-68     	; 0x10c <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	dc df       	rcall	.-72     	; 0x10c <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	da df       	rcall	.-76     	; 0x10c <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	d8 df       	rcall	.-80     	; 0x10c <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	d6 cf       	rjmp	.-84     	; 0x10c <lcd_command>
 160:	08 95       	ret

00000162 <lcd_set_cursor>:
 162:	80 68       	ori	r24, 0x80	; 128
	// (EN=0 RS=0)
}

void lcd_set_cursor(int position)
{
	lcd_command(0x80 | position);
 164:	d3 cf       	rjmp	.-90     	; 0x10c <lcd_command>
 166:	08 95       	ret

00000168 <wait>:
#define CompareValue 1;

void timer2Init(void);

void wait( int ms ) {
	for (int i = 0; i < ms; i++) {
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	08 c0       	rjmp	.+16     	; 0x17e <wait+0x16>
 16e:	ef ec       	ldi	r30, 0xCF	; 207
 170:	f7 e0       	ldi	r31, 0x07	; 7
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <wait+0xa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <wait+0x10>
 178:	00 00       	nop
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	ac f3       	brlt	.-22     	; 0x16e <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 184:	08 95       	ret

00000186 <__vector_9>:

int amountOfTimesPressed;
ISR (TIMER2_COMP_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
	amountOfTimesPressed++;
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <timer2Init>:

void timer2Init(void) {
	OCR2 = CompareValue;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << 7);
 1b8:	87 b7       	in	r24, 0x37	; 55
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0x1F;
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	85 bd       	out	0x25, r24	; 37
	sei();
 1c2:	78 94       	sei
 1c4:	08 95       	ret

000001c6 <main>:
}

int main(void) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	2a 97       	sbiw	r28, 0x0a	; 10
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	8a bb       	out	0x1a, r24	; 26
	DDRD &= ~(1 << 7);
 1de:	81 b3       	in	r24, 0x11	; 17
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 1e4:	b1 df       	rcall	.-158    	; 0x148 <lcd_init>
	timer2Init();
 1e6:	e6 df       	rcall	.-52     	; 0x1b4 <timer2Init>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
	
    /* Replace with your application code */
    while (1) {
		char buffer[10];
		lcd_set_cursor(0x0);
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ba df       	rcall	.-140    	; 0x162 <lcd_set_cursor>
 1ee:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1f0:	be 01       	movw	r22, r28
 1f2:	6f 5f       	subi	r22, 0xFF	; 255
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	05 d0       	rcall	.+10     	; 0x20a <__itoa_ncheck>
		lcd_display_text(itoa(amountOfTimesPressed, buffer, 10));
 200:	79 df       	rcall	.-270    	; 0xf4 <lcd_display_text>
 202:	84 e6       	ldi	r24, 0x64	; 100
		wait(100);
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	b0 df       	rcall	.-160    	; 0x168 <wait>
 208:	ef cf       	rjmp	.-34     	; 0x1e8 <main+0x22>

0000020a <__itoa_ncheck>:
 20a:	bb 27       	eor	r27, r27
 20c:	4a 30       	cpi	r20, 0x0A	; 10
 20e:	31 f4       	brne	.+12     	; 0x21c <__itoa_ncheck+0x12>
 210:	99 23       	and	r25, r25
 212:	22 f4       	brpl	.+8      	; 0x21c <__itoa_ncheck+0x12>
 214:	bd e2       	ldi	r27, 0x2D	; 45
 216:	90 95       	com	r25
 218:	81 95       	neg	r24
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	01 c0       	rjmp	.+2      	; 0x220 <__utoa_common>

0000021e <__utoa_ncheck>:
 21e:	bb 27       	eor	r27, r27

00000220 <__utoa_common>:
 220:	fb 01       	movw	r30, r22
 222:	55 27       	eor	r21, r21
 224:	aa 27       	eor	r26, r26
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	a4 17       	cp	r26, r20
 22e:	10 f0       	brcs	.+4      	; 0x234 <__utoa_common+0x14>
 230:	a4 1b       	sub	r26, r20
 232:	83 95       	inc	r24
 234:	50 51       	subi	r21, 0x10	; 16
 236:	b9 f7       	brne	.-18     	; 0x226 <__utoa_common+0x6>
 238:	a0 5d       	subi	r26, 0xD0	; 208
 23a:	aa 33       	cpi	r26, 0x3A	; 58
 23c:	08 f0       	brcs	.+2      	; 0x240 <__utoa_common+0x20>
 23e:	a9 5d       	subi	r26, 0xD9	; 217
 240:	a1 93       	st	Z+, r26
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	79 f7       	brne	.-34     	; 0x224 <__utoa_common+0x4>
 246:	b1 11       	cpse	r27, r1
 248:	b1 93       	st	Z+, r27
 24a:	11 92       	st	Z+, r1
 24c:	cb 01       	movw	r24, r22
 24e:	00 c0       	rjmp	.+0      	; 0x250 <strrev>

00000250 <strrev>:
 250:	dc 01       	movw	r26, r24
 252:	fc 01       	movw	r30, r24
 254:	67 2f       	mov	r22, r23
 256:	71 91       	ld	r23, Z+
 258:	77 23       	and	r23, r23
 25a:	e1 f7       	brne	.-8      	; 0x254 <strrev+0x4>
 25c:	32 97       	sbiw	r30, 0x02	; 2
 25e:	04 c0       	rjmp	.+8      	; 0x268 <strrev+0x18>
 260:	7c 91       	ld	r23, X
 262:	6d 93       	st	X+, r22
 264:	70 83       	st	Z, r23
 266:	62 91       	ld	r22, -Z
 268:	ae 17       	cp	r26, r30
 26a:	bf 07       	cpc	r27, r31
 26c:	c8 f3       	brcs	.-14     	; 0x260 <strrev+0x10>
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
