
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6d  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d5  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c8  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7e d0       	rcall	.+252    	; 0x1a6 <main>
  aa:	86 c0       	rjmp	.+268    	; 0x1b8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
}

/* Write commands to the LCD */
void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0;			// hoge nibble
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	98 60       	ori	r25, 0x08	; 8
  b8:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ef e4       	ldi	r30, 0x4F	; 79
  bc:	f3 ec       	ldi	r31, 0xC3	; 195
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_command+0x10>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_command+0x16>
  c4:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(25);				// wait 1 ms
	PORTC = 0x04;				// stop (EN = 0)
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;	// lage nibble
  ca:	f0 e1       	ldi	r31, 0x10	; 16
  cc:	8f 9f       	mul	r24, r31
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	85 bb       	out	0x15, r24	; 21
  da:	8f e4       	ldi	r24, 0x4F	; 79
  dc:	93 ec       	ldi	r25, 0xC3	; 195
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_command+0x30>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_command+0x36>
  e4:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(25);				// wait 1 ms
	PORTC = 0x00;				// stop
  e6:	15 ba       	out	0x15, r1	; 21
  e8:	08 95       	ret

000000ea <lcd_init>:

/* Initlializes the LCD */
void lcd_init(void)
{
	// Set ALL pins on PORTC to output
	DDRC = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	// return home (cursor to top left)
	lcd_command( 0x02 );
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	de df       	rcall	.-68     	; 0xae <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	dc df       	rcall	.-72     	; 0xae <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	da df       	rcall	.-76     	; 0xae <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	d8 df       	rcall	.-80     	; 0xae <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	d6 cf       	rjmp	.-84     	; 0xae <lcd_command>
 102:	08 95       	ret

00000104 <wait>:
 104:	20 e0       	ldi	r18, 0x00	; 0

void initTimer( void ) {
	OCR2 = 250;
	TIMSK|= (1 << 7);
	TCCR2 = 0x07;
	DDRC = 0xff;
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	08 c0       	rjmp	.+16     	; 0x11a <wait+0x16>
 10a:	ef ec       	ldi	r30, 0xCF	; 207
 10c:	f7 e0       	ldi	r31, 0x07	; 7
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <wait+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <wait+0x10>
 114:	00 00       	nop
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	ac f3       	brlt	.-22     	; 0x10a <wait+0x6>
 120:	08 95       	ret

00000122 <__vector_9>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCount>
 136:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCount+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCount+0x1>
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCount>
 144:	89 31       	cpi	r24, 0x19	; 25
 146:	91 05       	cpc	r25, r1
 148:	79 f4       	brne	.+30     	; 0x168 <__vector_9+0x46>
 14a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	21 11       	cpse	r18, r1
 150:	0b c0       	rjmp	.+22     	; 0x168 <__vector_9+0x46>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	80 58       	subi	r24, 0x80	; 128
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 162:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 166:	0f c0       	rjmp	.+30     	; 0x186 <__vector_9+0x64>
 168:	0f 97       	sbiw	r24, 0x0f	; 15
 16a:	69 f4       	brne	.+26     	; 0x186 <__vector_9+0x64>
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	49 f4       	brne	.+18     	; 0x186 <__vector_9+0x64>
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	80 58       	subi	r24, 0x80	; 128
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 182:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <timer2Init>:
	
}

void timer2Init(void) {
	OCR2 = 125;				// Compare value of counter 2
 196:	8d e7       	ldi	r24, 0x7D	; 125
 198:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << 7);		// T2 compare match interrupt enable
 19a:	87 b7       	in	r24, 0x37	; 55
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001011;
 1a0:	8b e0       	ldi	r24, 0x0B	; 11
 1a2:	85 bd       	out	0x25, r24	; 37
 1a4:	08 95       	ret

000001a6 <main>:
}

int main(void) {
    lcd_init();
 1a6:	a1 df       	rcall	.-190    	; 0xea <lcd_init>
    timer2Init();
 1a8:	f6 df       	rcall	.-20     	; 0x196 <timer2Init>
 1aa:	78 94       	sei
    sei();
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
    DDRD = 0xff;
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	84 e6       	ldi	r24, 0x64	; 100
	
    while (1) {
		wait(100);
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	a7 df       	rcall	.-178    	; 0x104 <wait>
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <main+0xa>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
