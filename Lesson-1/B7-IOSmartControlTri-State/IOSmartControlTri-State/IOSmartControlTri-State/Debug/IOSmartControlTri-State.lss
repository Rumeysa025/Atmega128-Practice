
IOSmartControlTri-State.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000948  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084e  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3f d0       	rcall	.+126    	; 0x118 <main>
  9a:	4d c0       	rjmp	.+154    	; 0x136 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#include <util/delay.h>

void setCharliePlexingLed(int lednr);

void wait(int ms) {
	for (int i=0; i<ms; i++) {
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ba:	08 95       	ret

000000bc <setCharliePlexingLed>:

void setCharliePlexingLed(int lednr) {
	
	switch(lednr) {
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	b9 f0       	breq	.+46     	; 0xf0 <setCharliePlexingLed+0x34>
  c2:	2c f4       	brge	.+10     	; 0xce <setCharliePlexingLed+0x12>
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	51 f0       	breq	.+20     	; 0xdc <setCharliePlexingLed+0x20>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	69 f0       	breq	.+26     	; 0xe6 <setCharliePlexingLed+0x2a>
  cc:	08 95       	ret
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	91 05       	cpc	r25, r1
  d2:	c1 f0       	breq	.+48     	; 0x104 <setCharliePlexingLed+0x48>
  d4:	94 f0       	brlt	.+36     	; 0xfa <setCharliePlexingLed+0x3e>
  d6:	05 97       	sbiw	r24, 0x05	; 5
  d8:	d1 f0       	breq	.+52     	; 0x10e <setCharliePlexingLed+0x52>
  da:	08 95       	ret
		case 0:		//LED1
		DDRD = 0xFB;	//0b11111011
  dc:	8b ef       	ldi	r24, 0xFB	; 251
  de:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x01;	//0b00000001
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	82 bb       	out	0x12, r24	; 18
		break;
  e4:	08 95       	ret
		
		case 1:		//LED2
		DDRD = 0xFB;	//0b11111011
  e6:	8b ef       	ldi	r24, 0xFB	; 251
  e8:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x02;	//0b00000010
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	82 bb       	out	0x12, r24	; 18
		break;
  ee:	08 95       	ret
		
		case 2:		//LED3
		DDRD = 0xFE;	//0b11111110
  f0:	8e ef       	ldi	r24, 0xFE	; 254
  f2:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x02;	//0b00000010
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	82 bb       	out	0x12, r24	; 18
		break;
  f8:	08 95       	ret
		
		case 3:		//LED4
		DDRD = 0xFE;	//0b11111110
  fa:	8e ef       	ldi	r24, 0xFE	; 254
  fc:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x04;	//0b00000100
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	82 bb       	out	0x12, r24	; 18
		break;
 102:	08 95       	ret
		
		case 4:		//LED5
		DDRD = 0xFD;	//0b11111101
 104:	8d ef       	ldi	r24, 0xFD	; 253
 106:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x01;	//0b00000001
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	82 bb       	out	0x12, r24	; 18
		break;
 10c:	08 95       	ret
		
		case 5:		//LED6
		DDRD = 0xFD;	//0b11111101
 10e:	8d ef       	ldi	r24, 0xFD	; 253
 110:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x04;	//0b00000100
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	82 bb       	out	0x12, r24	; 18
 116:	08 95       	ret

00000118 <main>:
		break;
	}
}

int main(void) {
	DDRD = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	81 bb       	out	0x11, r24	; 17
	int count = 5;
	
	while (1) {
		for (int i = 0; i <= count; i++) {
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	06 c0       	rjmp	.+12     	; 0x12e <main+0x16>
			setCharliePlexingLed(i);
 122:	ce 01       	movw	r24, r28
 124:	cb df       	rcall	.-106    	; 0xbc <setCharliePlexingLed>
			wait(500);
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	b9 df       	rcall	.-142    	; 0x9e <wait>
int main(void) {
	DDRD = 0xFF;
	int count = 5;
	
	while (1) {
		for (int i = 0; i <= count; i++) {
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	c6 30       	cpi	r28, 0x06	; 6
 130:	d1 05       	cpc	r29, r1
 132:	bc f3       	brlt	.-18     	; 0x122 <main+0xa>
 134:	f3 cf       	rjmp	.-26     	; 0x11c <main+0x4>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
