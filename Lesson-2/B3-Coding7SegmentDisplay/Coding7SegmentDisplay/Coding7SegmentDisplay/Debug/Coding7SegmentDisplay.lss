
Coding7SegmentDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096c  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033b  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012b  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__vector_1>
   6:	00 00       	nop
   8:	85 c0       	rjmp	.+266    	; 0x114 <__vector_2>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4d d0       	rcall	.+154    	; 0x15e <main>
  c4:	6d c0       	rjmp	.+218    	; 0x1a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void wait(int ms) {
	for (int i=0; i<ms; i++) {
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wait+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wait+0x10>
  d8:	00 00       	nop
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	ac f3       	brlt	.-22     	; 0xce <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  e4:	08 95       	ret

000000e6 <__vector_1>:
	0b01110001, //F
};

int number = 0;

ISR(INT0_vect) {
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	number++;
  f4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  f8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 102:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_2>:

ISR(INT1_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	number--;
 122:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 126:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 130:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_3>:

ISR(INT2_vect) {
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
	number = 0;
 14c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 150:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
}
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:

int main(void) {
	DDRB = 0xFF; //Pins PORTB output
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; //Pins PORTD input
 162:	11 ba       	out	0x11, r1	; 17
	EICRA |= 0x3F; //pins 0-1 rising edge
 164:	ea e6       	ldi	r30, 0x6A	; 106
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 63       	ori	r24, 0x3F	; 63
 16c:	80 83       	st	Z, r24
	EIMSK |= 0x07; //enable pin 0-1
 16e:	89 b7       	in	r24, 0x39	; 57
 170:	87 60       	ori	r24, 0x07	; 7
 172:	89 bf       	out	0x39, r24	; 57
	
	sei();
 174:	78 94       	sei
	
	PORTB = NUMBERS[0];
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	88 bb       	out	0x18, r24	; 24
	
	while (1) {
		if (number >= 0 && number <= 15) {
 17a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 182:	80 31       	cpi	r24, 0x10	; 16
 184:	91 05       	cpc	r25, r1
 186:	30 f4       	brcc	.+12     	; 0x194 <main+0x36>
			PORTB = NUMBERS[number];
 188:	fc 01       	movw	r30, r24
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	88 bb       	out	0x18, r24	; 24
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x3a>
		}
		else {
			PORTB = NUMBERS[14];
 194:	89 e7       	ldi	r24, 0x79	; 121
 196:	88 bb       	out	0x18, r24	; 24
		}
		wait(100);
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	95 df       	rcall	.-214    	; 0xc8 <wait>
	}
 19e:	ed cf       	rjmp	.-38     	; 0x17a <main+0x1c>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
